package main

import (
    "context"
    "fmt"
    "os"
    "time"

    "github.com/go-ble/ble"
    "github.com/go-ble/ble/linux"
)

func main() {
    // Create a new BLE device.
    d, err := linux.NewDevice()
    if err != nil {
        fmt.Fprintf(os.Stderr, "Failed to create BLE device: %v\n", err)
        return
    }
    ble.SetDefaultDevice(d)

    // Context with timeout for connection
    ctx := ble.WithSigHandler(context.WithTimeout(context.Background(), 10*time.Second))

    // Target device's Bluetooth address
    targetAddr := "00:00:00:03:C4:33"

    // Scan for devices and connect to the device with the specified Bluetooth address
    fmt.Println("Scanning for BLE devices...")
    cln, err := ble.Connect(ctx, func(a ble.Advertisement) bool {
        // Check if the current device's address matches the target address
        return strings.ToUpper(a.Addr().String()) == strings.ToUpper(targetAddr)
    })
    if err != nil {
        fmt.Fprintf(os.Stderr, "Failed to connect: %v\n", err)
        return
    }
    defer cln.CancelConnection()

    fmt.Println("Connected. Discovering services and characteristics...")
    
    // Discover services
    svcs, err := cln.DiscoverServices(nil)
    if err != nil {
        fmt.Fprintf(os.Stderr, "Failed to discover services: %v\n", err)
        return
    }

    for _, svc := range svcs {
        fmt.Printf("Service: %s\n", svc.UUID)

        // Discover characteristics for the service
        chars, err := cln.DiscoverCharacteristics(nil, svc)
        if err != nil {
            fmt.Fprintf(os.Stderr, "Failed to discover characteristics for service %s: %v\n", svc.UUID, err)
            continue
        }

        for _, char := range chars {
            fmt.Printf("  Characteristic: %s\n", char.UUID)
        }
    }
}
